//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde von einer Vorlage generiert.
//
//     Manuelle Änderungen an dieser Datei führen möglicherweise zu unerwartetem Verhalten der Anwendung.
//     Manuelle Änderungen an dieser Datei werden überschrieben, wenn der Code neu generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InsiteServices
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Insite_DevEntities : DbContext
    {
        public Insite_DevEntities()
            : base("name=Insite_DevEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Data_AccessAreaEvents> Data_AccessAreaEvents { get; set; }
        public virtual DbSet<Data_AccessEvents> Data_AccessEvents { get; set; }
        public virtual DbSet<Data_AccessRightEvents> Data_AccessRightEvents { get; set; }
        public virtual DbSet<Data_EmployeeAccessLog> Data_EmployeeAccessLog { get; set; }
        public virtual DbSet<Data_EmployeeMinWage> Data_EmployeeMinWage { get; set; }
        public virtual DbSet<Data_Logging> Data_Logging { get; set; }
        public virtual DbSet<Data_MWAttestationRequest> Data_MWAttestationRequest { get; set; }
        public virtual DbSet<Data_PassHistory> Data_PassHistory { get; set; }
        public virtual DbSet<Data_PresenceAccessEvents> Data_PresenceAccessEvents { get; set; }
        public virtual DbSet<Data_PresenceCompany> Data_PresenceCompany { get; set; }
        public virtual DbSet<Data_PresenceEmployee> Data_PresenceEmployee { get; set; }
        public virtual DbSet<Data_ProcessEvents> Data_ProcessEvents { get; set; }
        public virtual DbSet<Data_ShortTermAccessAreas> Data_ShortTermAccessAreas { get; set; }
        public virtual DbSet<Data_ShortTermPasses> Data_ShortTermPasses { get; set; }
        public virtual DbSet<Data_ShortTermPassesPrint> Data_ShortTermPassesPrint { get; set; }
        public virtual DbSet<Data_ShortTermVisitors> Data_ShortTermVisitors { get; set; }
        public virtual DbSet<Data_TerminalStatus> Data_TerminalStatus { get; set; }
        public virtual DbSet<Data_UserControlStates> Data_UserControlStates { get; set; }
        public virtual DbSet<History_AccessAreas> History_AccessAreas { get; set; }
        public virtual DbSet<History_Actions_Fields> History_Actions_Fields { get; set; }
        public virtual DbSet<History_Addresses> History_Addresses { get; set; }
        public virtual DbSet<History_AllowedLanguages> History_AllowedLanguages { get; set; }
        public virtual DbSet<History_BuildingProjects> History_BuildingProjects { get; set; }
        public virtual DbSet<History_Companies> History_Companies { get; set; }
        public virtual DbSet<History_Countries> History_Countries { get; set; }
        public virtual DbSet<History_CountryGroups> History_CountryGroups { get; set; }
        public virtual DbSet<History_Dialogs_Actions> History_Dialogs_Actions { get; set; }
        public virtual DbSet<History_DocumentCheckingRules> History_DocumentCheckingRules { get; set; }
        public virtual DbSet<History_DocumentRules> History_DocumentRules { get; set; }
        public virtual DbSet<History_Employees> History_Employees { get; set; }
        public virtual DbSet<History_EmploymentStatus> History_EmploymentStatus { get; set; }
        public virtual DbSet<History_FirstAiders> History_FirstAiders { get; set; }
        public virtual DbSet<History_RelevantDocuments> History_RelevantDocuments { get; set; }
        public virtual DbSet<History_ReplacementPassCases> History_ReplacementPassCases { get; set; }
        public virtual DbSet<History_Roles> History_Roles { get; set; }
        public virtual DbSet<History_Roles_Dialogs> History_Roles_Dialogs { get; set; }
        public virtual DbSet<History_S_Addresses> History_S_Addresses { get; set; }
        public virtual DbSet<History_S_Companies> History_S_Companies { get; set; }
        public virtual DbSet<History_S_CostLocations> History_S_CostLocations { get; set; }
        public virtual DbSet<History_S_TariffContracts> History_S_TariffContracts { get; set; }
        public virtual DbSet<History_S_Tariffs> History_S_Tariffs { get; set; }
        public virtual DbSet<History_S_TariffScopes> History_S_TariffScopes { get; set; }
        public virtual DbSet<History_S_TariffWageGroups> History_S_TariffWageGroups { get; set; }
        public virtual DbSet<History_S_TariffWages> History_S_TariffWages { get; set; }
        public virtual DbSet<History_S_TradeGroupsStatistical> History_S_TradeGroupsStatistical { get; set; }
        public virtual DbSet<History_S_TradesStatistical> History_S_TradesStatistical { get; set; }
        public virtual DbSet<History_ShortTermPassTypes> History_ShortTermPassTypes { get; set; }
        public virtual DbSet<History_StaffRoles> History_StaffRoles { get; set; }
        public virtual DbSet<History_TariffContracts> History_TariffContracts { get; set; }
        public virtual DbSet<History_TariffData> History_TariffData { get; set; }
        public virtual DbSet<History_TimeSlotGroups> History_TimeSlotGroups { get; set; }
        public virtual DbSet<History_TimeSlots> History_TimeSlots { get; set; }
        public virtual DbSet<History_TradeGroups> History_TradeGroups { get; set; }
        public virtual DbSet<History_Trades> History_Trades { get; set; }
        public virtual DbSet<History_Translations> History_Translations { get; set; }
        public virtual DbSet<History_Users> History_Users { get; set; }
        public virtual DbSet<Master_AccessAreas> Master_AccessAreas { get; set; }
        public virtual DbSet<Master_AccessSystems> Master_AccessSystems { get; set; }
        public virtual DbSet<Master_Actions_Fields> Master_Actions_Fields { get; set; }
        public virtual DbSet<Master_Addresses> Master_Addresses { get; set; }
        public virtual DbSet<Master_AllowedLanguages> Master_AllowedLanguages { get; set; }
        public virtual DbSet<Master_AttributesBuildingProject> Master_AttributesBuildingProject { get; set; }
        public virtual DbSet<Master_AttributesCompany> Master_AttributesCompany { get; set; }
        public virtual DbSet<Master_BuildingProjects> Master_BuildingProjects { get; set; }
        public virtual DbSet<Master_Companies> Master_Companies { get; set; }
        public virtual DbSet<Master_CompanyAdditions> Master_CompanyAdditions { get; set; }
        public virtual DbSet<Master_CompanyContacts> Master_CompanyContacts { get; set; }
        public virtual DbSet<Master_CompanyTariffs> Master_CompanyTariffs { get; set; }
        public virtual DbSet<Master_CompanyTrades> Master_CompanyTrades { get; set; }
        public virtual DbSet<Master_ConcatActions> Master_ConcatActions { get; set; }
        public virtual DbSet<Master_Countries> Master_Countries { get; set; }
        public virtual DbSet<Master_CountryGroups> Master_CountryGroups { get; set; }
        public virtual DbSet<Master_Dialogs_Actions> Master_Dialogs_Actions { get; set; }
        public virtual DbSet<Master_DocumentCheckingRules> Master_DocumentCheckingRules { get; set; }
        public virtual DbSet<Master_DocumentRules> Master_DocumentRules { get; set; }
        public virtual DbSet<Master_EmployeeAccessAreas> Master_EmployeeAccessAreas { get; set; }
        public virtual DbSet<Master_EmployeeMinWageAttestation> Master_EmployeeMinWageAttestation { get; set; }
        public virtual DbSet<Master_EmployeeQualification> Master_EmployeeQualification { get; set; }
        public virtual DbSet<Master_EmployeeRelevantDocuments> Master_EmployeeRelevantDocuments { get; set; }
        public virtual DbSet<Master_Employees> Master_Employees { get; set; }
        public virtual DbSet<Master_EmployeeWageGroupAssignment> Master_EmployeeWageGroupAssignment { get; set; }
        public virtual DbSet<Master_EmploymentStatus> Master_EmploymentStatus { get; set; }
        public virtual DbSet<Master_FirstAiders> Master_FirstAiders { get; set; }
        public virtual DbSet<Master_Passes> Master_Passes { get; set; }
        public virtual DbSet<Master_RelevantDocuments> Master_RelevantDocuments { get; set; }
        public virtual DbSet<Master_ReplacementPassCases> Master_ReplacementPassCases { get; set; }
        public virtual DbSet<Master_Rights> Master_Rights { get; set; }
        public virtual DbSet<Master_Roles> Master_Roles { get; set; }
        public virtual DbSet<Master_Roles_Dialogs> Master_Roles_Dialogs { get; set; }
        public virtual DbSet<Master_Roles_Users> Master_Roles_Users { get; set; }
        public virtual DbSet<Master_ShortTermPassTypes> Master_ShortTermPassTypes { get; set; }
        public virtual DbSet<Master_StaffRoles> Master_StaffRoles { get; set; }
        public virtual DbSet<Master_States> Master_States { get; set; }
        public virtual DbSet<Master_TariffContracts> Master_TariffContracts { get; set; }
        public virtual DbSet<Master_TariffData> Master_TariffData { get; set; }
        public virtual DbSet<Master_Templates> Master_Templates { get; set; }
        public virtual DbSet<Master_Terminal> Master_Terminal { get; set; }
        public virtual DbSet<Master_TimeSlotGroups> Master_TimeSlotGroups { get; set; }
        public virtual DbSet<Master_TimeSlots> Master_TimeSlots { get; set; }
        public virtual DbSet<Master_TradeGroups> Master_TradeGroups { get; set; }
        public virtual DbSet<Master_Trades> Master_Trades { get; set; }
        public virtual DbSet<Master_Translations> Master_Translations { get; set; }
        public virtual DbSet<Master_TreeNodes> Master_TreeNodes { get; set; }
        public virtual DbSet<Master_UserBuildingProjects> Master_UserBuildingProjects { get; set; }
        public virtual DbSet<Master_Users> Master_Users { get; set; }
        public virtual DbSet<System_Actions> System_Actions { get; set; }
        public virtual DbSet<System_Addresses> System_Addresses { get; set; }
        public virtual DbSet<System_Companies> System_Companies { get; set; }
        public virtual DbSet<System_CompanyTariffs> System_CompanyTariffs { get; set; }
        public virtual DbSet<System_CostLocations> System_CostLocations { get; set; }
        public virtual DbSet<System_Currencies> System_Currencies { get; set; }
        public virtual DbSet<System_Dialogs> System_Dialogs { get; set; }
        public virtual DbSet<System_Documents> System_Documents { get; set; }
        public virtual DbSet<System_Fields> System_Fields { get; set; }
        public virtual DbSet<System_Help> System_Help { get; set; }
        public virtual DbSet<System_Images> System_Images { get; set; }
        public virtual DbSet<System_Jobs> System_Jobs { get; set; }
        public virtual DbSet<System_JobTable> System_JobTable { get; set; }
        public virtual DbSet<System_KeyTable> System_KeyTable { get; set; }
        public virtual DbSet<System_Languages> System_Languages { get; set; }
        public virtual DbSet<System_MailAttachment> System_MailAttachment { get; set; }
        public virtual DbSet<System_Mailbox> System_Mailbox { get; set; }
        public virtual DbSet<System_RelevantFor> System_RelevantFor { get; set; }
        public virtual DbSet<System_ReturnCodes> System_ReturnCodes { get; set; }
        public virtual DbSet<System_Salutations> System_Salutations { get; set; }
        public virtual DbSet<System_SessionLog> System_SessionLog { get; set; }
        public virtual DbSet<System_StateDefaults> System_StateDefaults { get; set; }
        public virtual DbSet<System_Status> System_Status { get; set; }
        public virtual DbSet<System_Systems> System_Systems { get; set; }
        public virtual DbSet<System_Tables> System_Tables { get; set; }
        public virtual DbSet<System_Tables_Columns> System_Tables_Columns { get; set; }
        public virtual DbSet<System_TariffContracts> System_TariffContracts { get; set; }
        public virtual DbSet<System_Tariffs> System_Tariffs { get; set; }
        public virtual DbSet<System_TariffScopes> System_TariffScopes { get; set; }
        public virtual DbSet<System_TariffWageGroups> System_TariffWageGroups { get; set; }
        public virtual DbSet<System_TariffWages> System_TariffWages { get; set; }
        public virtual DbSet<System_TradeGroupsStatistical> System_TradeGroupsStatistical { get; set; }
        public virtual DbSet<System_TradesStatistical> System_TradesStatistical { get; set; }
        public virtual DbSet<System_Variables> System_Variables { get; set; }
        public virtual DbSet<ViewStateData> ViewStateData { get; set; }
        public virtual DbSet<View_Cultures> View_Cultures { get; set; }
        public virtual DbSet<View_Languages> View_Languages { get; set; }
        public virtual DbSet<View_MasterCompanies_Data_PresenceCompany> View_MasterCompanies_Data_PresenceCompany { get; set; }
        public virtual DbSet<Master_Bp_Contact> Master_Bp_Contact { get; set; }
        public virtual DbSet<Data_Statistics> Data_Statistics { get; set; }
        public virtual DbSet<Data_StatisticsAccessEvents> Data_StatisticsAccessEvents { get; set; }
        public virtual DbSet<Data_StatisticsTerminals> Data_StatisticsTerminals { get; set; }
    
        public virtual ObjectResult<AccessDataConsistency_Result> AccessDataConsistency(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> presenceDay)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var presenceDayParameter = presenceDay.HasValue ?
                new ObjectParameter("PresenceDay", presenceDay) :
                new ObjectParameter("PresenceDay", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccessDataConsistency_Result>("AccessDataConsistency", systemIDParameter, bpIDParameter, presenceDayParameter);
        }
    
        public virtual int AccessEventConsistency(Nullable<int> systemID, Nullable<int> bpID, Nullable<bool> ignoreLink, Nullable<int> accessAreaID, Nullable<int> lookBackDays)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var ignoreLinkParameter = ignoreLink.HasValue ?
                new ObjectParameter("IgnoreLink", ignoreLink) :
                new ObjectParameter("IgnoreLink", typeof(bool));
    
            var accessAreaIDParameter = accessAreaID.HasValue ?
                new ObjectParameter("AccessAreaID", accessAreaID) :
                new ObjectParameter("AccessAreaID", typeof(int));
    
            var lookBackDaysParameter = lookBackDays.HasValue ?
                new ObjectParameter("LookBackDays", lookBackDays) :
                new ObjectParameter("LookBackDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccessEventConsistency", systemIDParameter, bpIDParameter, ignoreLinkParameter, accessAreaIDParameter, lookBackDaysParameter);
        }
    
        public virtual int ActivatePass(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, string internalID, string userName)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var internalIDParameter = internalID != null ?
                new ObjectParameter("InternalID", internalID) :
                new ObjectParameter("InternalID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActivatePass", systemIDParameter, bpIDParameter, employeeIDParameter, internalIDParameter, userNameParameter);
        }
    
        public virtual int AppendLog(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> log_date, string thread, string log_level, string logger, string message, string exception, string sessionID, Nullable<bool> isDialog, Nullable<int> userID, Nullable<int> actionID, string refID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var log_dateParameter = log_date.HasValue ?
                new ObjectParameter("log_date", log_date) :
                new ObjectParameter("log_date", typeof(System.DateTime));
    
            var threadParameter = thread != null ?
                new ObjectParameter("thread", thread) :
                new ObjectParameter("thread", typeof(string));
    
            var log_levelParameter = log_level != null ?
                new ObjectParameter("log_level", log_level) :
                new ObjectParameter("log_level", typeof(string));
    
            var loggerParameter = logger != null ?
                new ObjectParameter("logger", logger) :
                new ObjectParameter("logger", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var exceptionParameter = exception != null ?
                new ObjectParameter("exception", exception) :
                new ObjectParameter("exception", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var isDialogParameter = isDialog.HasValue ?
                new ObjectParameter("IsDialog", isDialog) :
                new ObjectParameter("IsDialog", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var refIDParameter = refID != null ?
                new ObjectParameter("RefID", refID) :
                new ObjectParameter("RefID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppendLog", systemIDParameter, bpIDParameter, log_dateParameter, threadParameter, log_levelParameter, loggerParameter, messageParameter, exceptionParameter, sessionIDParameter, isDialogParameter, userIDParameter, actionIDParameter, refIDParameter);
        }
    
        public virtual int CleanupProcessEvents(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanupProcessEvents", systemIDParameter, bpIDParameter);
        }
    
        public virtual int CompressPresenceData(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> presenceDay, Nullable<int> compressType)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var presenceDayParameter = presenceDay.HasValue ?
                new ObjectParameter("PresenceDay", presenceDay) :
                new ObjectParameter("PresenceDay", typeof(System.DateTime));
    
            var compressTypeParameter = compressType.HasValue ?
                new ObjectParameter("CompressType", compressType) :
                new ObjectParameter("CompressType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompressPresenceData", systemIDParameter, bpIDParameter, presenceDayParameter, compressTypeParameter);
        }
    
        public virtual int CompressPresenceDataLoop(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> presenceDayFrom, Nullable<System.DateTime> presenceDayUntil, Nullable<int> compressType)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var presenceDayFromParameter = presenceDayFrom.HasValue ?
                new ObjectParameter("PresenceDayFrom", presenceDayFrom) :
                new ObjectParameter("PresenceDayFrom", typeof(System.DateTime));
    
            var presenceDayUntilParameter = presenceDayUntil.HasValue ?
                new ObjectParameter("PresenceDayUntil", presenceDayUntil) :
                new ObjectParameter("PresenceDayUntil", typeof(System.DateTime));
    
            var compressTypeParameter = compressType.HasValue ?
                new ObjectParameter("CompressType", compressType) :
                new ObjectParameter("CompressType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompressPresenceDataLoop", systemIDParameter, bpIDParameter, presenceDayFromParameter, presenceDayUntilParameter, compressTypeParameter);
        }
    
        public virtual int CopyBuildingProject(Nullable<int> systemID, Nullable<int> bpIDFrom, Nullable<int> bpIDTo, Nullable<int> userID, string userName)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDFromParameter = bpIDFrom.HasValue ?
                new ObjectParameter("BpIDFrom", bpIDFrom) :
                new ObjectParameter("BpIDFrom", typeof(int));
    
            var bpIDToParameter = bpIDTo.HasValue ?
                new ObjectParameter("BpIDTo", bpIDTo) :
                new ObjectParameter("BpIDTo", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyBuildingProject", systemIDParameter, bpIDFromParameter, bpIDToParameter, userIDParameter, userNameParameter);
        }
    
        public virtual int CreateAlternateTranslations(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> dialogID, Nullable<int> fieldID, Nullable<int> foreignID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var dialogIDParameter = dialogID.HasValue ?
                new ObjectParameter("DialogID", dialogID) :
                new ObjectParameter("DialogID", typeof(int));
    
            var fieldIDParameter = fieldID.HasValue ?
                new ObjectParameter("FieldID", fieldID) :
                new ObjectParameter("FieldID", typeof(int));
    
            var foreignIDParameter = foreignID.HasValue ?
                new ObjectParameter("ForeignID", foreignID) :
                new ObjectParameter("ForeignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateAlternateTranslations", systemIDParameter, bpIDParameter, dialogIDParameter, fieldIDParameter, foreignIDParameter);
        }
    
        public virtual int CreateEmployeeMinWage(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateEmployeeMinWage", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateFieldsTranslations(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateFieldsTranslations", systemIDParameter, bpIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateRightsHierarchy(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateRightsHierarchy", systemIDParameter, bpIDParameter);
        }
    
        public virtual int CreateTablesColumnsCatalog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateTablesColumnsCatalog");
        }
    
        public virtual int DeactivatePass(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, string internalID, string reason, string userName)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var internalIDParameter = internalID != null ?
                new ObjectParameter("InternalID", internalID) :
                new ObjectParameter("InternalID", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivatePass", systemIDParameter, bpIDParameter, employeeIDParameter, internalIDParameter, reasonParameter, userNameParameter);
        }
    
        public virtual int DeleteBuildingProject(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBuildingProject", systemIDParameter, bpIDParameter);
        }
    
        public virtual int DeleteSystemCompany(Nullable<int> systemID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSystemCompany", systemIDParameter, companyIDParameter);
        }
    
        public virtual int DeleteViewState(string vsSession)
        {
            var vsSessionParameter = vsSession != null ?
                new ObjectParameter("VsSession", vsSession) :
                new ObjectParameter("VsSession", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteViewState", vsSessionParameter);
        }
    
        public virtual ObjectResult<GetAccessAreaEvents_Result> GetAccessAreaEvents(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> accessRightEventID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var accessRightEventIDParameter = accessRightEventID.HasValue ?
                new ObjectParameter("AccessRightEventID", accessRightEventID) :
                new ObjectParameter("AccessRightEventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessAreaEvents_Result>("GetAccessAreaEvents", systemIDParameter, bpIDParameter, accessRightEventIDParameter);
        }
    
        public virtual ObjectResult<GetAccessEvents_Result> GetAccessEvents(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> lastID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var lastIDParameter = lastID.HasValue ?
                new ObjectParameter("LastID", lastID) :
                new ObjectParameter("LastID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessEvents_Result>("GetAccessEvents", systemIDParameter, bpIDParameter, lastIDParameter);
        }
    
        public virtual ObjectResult<GetAccessHistory_Result> GetAccessHistory(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> userID, Nullable<int> presentState)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var presentStateParameter = presentState.HasValue ?
                new ObjectParameter("PresentState", presentState) :
                new ObjectParameter("PresentState", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessHistory_Result>("GetAccessHistory", systemIDParameter, bpIDParameter, companyIDParameter, userIDParameter, presentStateParameter);
        }
    
        public virtual ObjectResult<GetAccessHistoryEmployee_Result> GetAccessHistoryEmployee(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessHistoryEmployee_Result>("GetAccessHistoryEmployee", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetAccessRightEvents_Result> GetAccessRightEvents(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> ownerID, Nullable<bool> newestOnly)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var newestOnlyParameter = newestOnly.HasValue ?
                new ObjectParameter("NewestOnly", newestOnly) :
                new ObjectParameter("NewestOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessRightEvents_Result>("GetAccessRightEvents", systemIDParameter, bpIDParameter, ownerIDParameter, newestOnlyParameter);
        }
    
        public virtual ObjectResult<GetAccessRightEventsExtended_Result> GetAccessRightEventsExtended(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> changesSince)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var changesSinceParameter = changesSince.HasValue ?
                new ObjectParameter("ChangesSince", changesSince) :
                new ObjectParameter("ChangesSince", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessRightEventsExtended_Result>("GetAccessRightEventsExtended", systemIDParameter, bpIDParameter, changesSinceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAppliedRule(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAppliedRule", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetBpCompaniesWithLevel_Result> GetBpCompaniesWithLevel(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> level, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBpCompaniesWithLevel_Result>("GetBpCompaniesWithLevel", systemIDParameter, bpIDParameter, levelParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCompaniesData_Result> GetCompaniesData(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyCentralID, Nullable<bool> showList, string searchText, Nullable<int> userID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyCentralIDParameter = companyCentralID.HasValue ?
                new ObjectParameter("CompanyCentralID", companyCentralID) :
                new ObjectParameter("CompanyCentralID", typeof(int));
    
            var showListParameter = showList.HasValue ?
                new ObjectParameter("ShowList", showList) :
                new ObjectParameter("ShowList", typeof(bool));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompaniesData_Result>("GetCompaniesData", systemIDParameter, bpIDParameter, companyCentralIDParameter, showListParameter, searchTextParameter, userIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCompaniesSelection_Result> GetCompaniesSelection(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> userID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompaniesSelection_Result>("GetCompaniesSelection", systemIDParameter, bpIDParameter, companyIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetCompaniesSelectionExcl_Result> GetCompaniesSelectionExcl(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> userID, Nullable<int> companyIDExcl)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDExclParameter = companyIDExcl.HasValue ?
                new ObjectParameter("CompanyIDExcl", companyIDExcl) :
                new ObjectParameter("CompanyIDExcl", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompaniesSelectionExcl_Result>("GetCompaniesSelectionExcl", systemIDParameter, bpIDParameter, companyIDParameter, userIDParameter, companyIDExclParameter);
        }
    
        public virtual ObjectResult<GetCompaniesSubcontractors_Result> GetCompaniesSubcontractors(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyCentralID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyCentralIDParameter = companyCentralID.HasValue ?
                new ObjectParameter("CompanyCentralID", companyCentralID) :
                new ObjectParameter("CompanyCentralID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompaniesSubcontractors_Result>("GetCompaniesSubcontractors", systemIDParameter, bpIDParameter, companyCentralIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyAdminUser_Result> GetCompanyAdminUser(Nullable<int> systemID, Nullable<int> companyCentralID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var companyCentralIDParameter = companyCentralID.HasValue ?
                new ObjectParameter("CompanyCentralID", companyCentralID) :
                new ObjectParameter("CompanyCentralID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyAdminUser_Result>("GetCompanyAdminUser", systemIDParameter, companyCentralIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyAdminUserWithBP_Result> GetCompanyAdminUserWithBP(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyAdminUserWithBP_Result>("GetCompanyAdminUserWithBP", systemIDParameter, bpIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyCentralDuplicates_Result> GetCompanyCentralDuplicates(Nullable<int> systemID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyCentralDuplicates_Result>("GetCompanyCentralDuplicates", systemIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyContainerManagement_Result> GetCompanyContainerManagement(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyContainerManagement_Result>("GetCompanyContainerManagement", systemIDParameter, bpIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyInfo_Result> GetCompanyInfo(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyInfo_Result>("GetCompanyInfo", systemIDParameter, bpIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyStatistics_Result> GetCompanyStatistics(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyStatistics_Result>("GetCompanyStatistics", systemIDParameter, bpIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyTariff_Result> GetCompanyTariff(Nullable<int> systemID, Nullable<int> companyID, Nullable<int> tariffScopeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var tariffScopeIDParameter = tariffScopeID.HasValue ?
                new ObjectParameter("TariffScopeID", tariffScopeID) :
                new ObjectParameter("TariffScopeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyTariff_Result>("GetCompanyTariff", systemIDParameter, companyIDParameter, tariffScopeIDParameter);
        }
    
        public virtual ObjectResult<string> GetEmployeeAccessArea(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetEmployeeAccessArea", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeAccessAreas_Result> GetEmployeeAccessAreas(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeAccessAreas_Result>("GetEmployeeAccessAreas", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeContainerManagement_Result> GetEmployeeContainerManagement(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeContainerManagement_Result>("GetEmployeeContainerManagement", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeDuplicates_Result> GetEmployeeDuplicates(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDuplicates_Result>("GetEmployeeDuplicates", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetEmployeePassStatus(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetEmployeePassStatus", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<string> GetEmployeePassTemplate(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, Nullable<int> dialogID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var dialogIDParameter = dialogID.HasValue ?
                new ObjectParameter("DialogID", dialogID) :
                new ObjectParameter("DialogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetEmployeePassTemplate", systemIDParameter, bpIDParameter, employeeIDParameter, dialogIDParameter);
        }
    
        public virtual ObjectResult<string> GetEmployeeQualification(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetEmployeeQualification", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeRelevantDocuments_Result> GetEmployeeRelevantDocuments(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, string languageID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var languageIDParameter = languageID != null ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeRelevantDocuments_Result>("GetEmployeeRelevantDocuments", systemIDParameter, bpIDParameter, employeeIDParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeRelevantDocumentsToAdd_Result> GetEmployeeRelevantDocumentsToAdd(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, Nullable<int> relevantFor)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var relevantForParameter = relevantFor.HasValue ?
                new ObjectParameter("RelevantFor", relevantFor) :
                new ObjectParameter("RelevantFor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeRelevantDocumentsToAdd_Result>("GetEmployeeRelevantDocumentsToAdd", systemIDParameter, bpIDParameter, employeeIDParameter, relevantForParameter);
        }
    
        public virtual ObjectResult<GetEmployees_Result> GetEmployees(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyCentralID, Nullable<int> companyID, Nullable<int> employeeID, string externalPassID, Nullable<int> employmentStatusID, Nullable<int> tradeID, Nullable<int> userID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyCentralIDParameter = companyCentralID.HasValue ?
                new ObjectParameter("CompanyCentralID", companyCentralID) :
                new ObjectParameter("CompanyCentralID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var externalPassIDParameter = externalPassID != null ?
                new ObjectParameter("ExternalPassID", externalPassID) :
                new ObjectParameter("ExternalPassID", typeof(string));
    
            var employmentStatusIDParameter = employmentStatusID.HasValue ?
                new ObjectParameter("EmploymentStatusID", employmentStatusID) :
                new ObjectParameter("EmploymentStatusID", typeof(int));
    
            var tradeIDParameter = tradeID.HasValue ?
                new ObjectParameter("TradeID", tradeID) :
                new ObjectParameter("TradeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployees_Result>("GetEmployees", systemIDParameter, bpIDParameter, companyCentralIDParameter, companyIDParameter, employeeIDParameter, externalPassIDParameter, employmentStatusIDParameter, tradeIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeesDropDown_Result> GetEmployeesDropDown(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyCentralID, Nullable<int> userID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyCentralIDParameter = companyCentralID.HasValue ?
                new ObjectParameter("CompanyCentralID", companyCentralID) :
                new ObjectParameter("CompanyCentralID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesDropDown_Result>("GetEmployeesDropDown", systemIDParameter, bpIDParameter, companyCentralIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetEmployeesWithCountry(Nullable<int> systemID, Nullable<int> bpID, string countryID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetEmployeesWithCountry", systemIDParameter, bpIDParameter, countryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetEmployeesWithEmploymentStatus(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> countryGroupIDEmployer, Nullable<int> countryGroupIDEmployee, Nullable<int> employmentStatusID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var countryGroupIDEmployerParameter = countryGroupIDEmployer.HasValue ?
                new ObjectParameter("CountryGroupIDEmployer", countryGroupIDEmployer) :
                new ObjectParameter("CountryGroupIDEmployer", typeof(int));
    
            var countryGroupIDEmployeeParameter = countryGroupIDEmployee.HasValue ?
                new ObjectParameter("CountryGroupIDEmployee", countryGroupIDEmployee) :
                new ObjectParameter("CountryGroupIDEmployee", typeof(int));
    
            var employmentStatusIDParameter = employmentStatusID.HasValue ?
                new ObjectParameter("EmploymentStatusID", employmentStatusID) :
                new ObjectParameter("EmploymentStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetEmployeesWithEmploymentStatus", systemIDParameter, bpIDParameter, countryGroupIDEmployerParameter, countryGroupIDEmployeeParameter, employmentStatusIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeesWithRelevantDocument_Result> GetEmployeesWithRelevantDocument(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> relevantDocumentID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var relevantDocumentIDParameter = relevantDocumentID.HasValue ?
                new ObjectParameter("RelevantDocumentID", relevantDocumentID) :
                new ObjectParameter("RelevantDocumentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesWithRelevantDocument_Result>("GetEmployeesWithRelevantDocument", systemIDParameter, bpIDParameter, relevantDocumentIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeesWithTimeSlot_Result> GetEmployeesWithTimeSlot(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> timeSlotID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var timeSlotIDParameter = timeSlotID.HasValue ?
                new ObjectParameter("TimeSlotID", timeSlotID) :
                new ObjectParameter("TimeSlotID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesWithTimeSlot_Result>("GetEmployeesWithTimeSlot", systemIDParameter, bpIDParameter, timeSlotIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeWageGroups_Result> GetEmployeeWageGroups(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<System.DateTime> validFrom)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var validFromParameter = validFrom.HasValue ?
                new ObjectParameter("ValidFrom", validFrom) :
                new ObjectParameter("ValidFrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeWageGroups_Result>("GetEmployeeWageGroups", systemIDParameter, bpIDParameter, companyIDParameter, validFromParameter);
        }
    
        public virtual ObjectResult<GetExpiringTariffs_Result> GetExpiringTariffs(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExpiringTariffs_Result>("GetExpiringTariffs", systemIDParameter);
        }
    
        public virtual ObjectResult<GetLockedMainContractor_Result> GetLockedMainContractor(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLockedMainContractor_Result>("GetLockedMainContractor", systemIDParameter, bpIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetMissingFirstAiders_Result> GetMissingFirstAiders(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMissingFirstAiders_Result>("GetMissingFirstAiders", systemIDParameter, bpIDParameter);
        }
    
        public virtual ObjectResult<GetMWAttestationRequests_Result> GetMWAttestationRequests(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> requestID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMWAttestationRequests_Result>("GetMWAttestationRequests", systemIDParameter, bpIDParameter, companyIDParameter, requestIDParameter);
        }
    
        public virtual ObjectResult<GetMWLackTriggerOverdue_Result> GetMWLackTriggerOverdue(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMWLackTriggerOverdue_Result>("GetMWLackTriggerOverdue", systemIDParameter, bpIDParameter);
        }
    
        public virtual ObjectResult<GetMWLackTriggerOverdueEmployee_Result> GetMWLackTriggerOverdueEmployee(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMWLackTriggerOverdueEmployee_Result>("GetMWLackTriggerOverdueEmployee", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetNextID(Nullable<int> systemID, string iDName)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var iDNameParameter = iDName != null ?
                new ObjectParameter("IDName", iDName) :
                new ObjectParameter("IDName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetNextID", systemIDParameter, iDNameParameter);
        }
    
        public virtual ObjectResult<GetParentContractors_Result> GetParentContractors(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> level)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetParentContractors_Result>("GetParentContractors", systemIDParameter, bpIDParameter, companyIDParameter, levelParameter);
        }
    
        public virtual ObjectResult<GetParentCustomers_Result> GetParentCustomers(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetParentCustomers_Result>("GetParentCustomers", systemIDParameter, bpIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetPassBillings_Result> GetPassBillings(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> evaluationPeriod, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateUntil, Nullable<int> companyLevel, string remarks)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var evaluationPeriodParameter = evaluationPeriod.HasValue ?
                new ObjectParameter("EvaluationPeriod", evaluationPeriod) :
                new ObjectParameter("EvaluationPeriod", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateUntilParameter = dateUntil.HasValue ?
                new ObjectParameter("DateUntil", dateUntil) :
                new ObjectParameter("DateUntil", typeof(System.DateTime));
    
            var companyLevelParameter = companyLevel.HasValue ?
                new ObjectParameter("CompanyLevel", companyLevel) :
                new ObjectParameter("CompanyLevel", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPassBillings_Result>("GetPassBillings", systemIDParameter, bpIDParameter, companyIDParameter, evaluationPeriodParameter, dateFromParameter, dateUntilParameter, companyLevelParameter, remarksParameter);
        }
    
        public virtual ObjectResult<GetPassInfo_Result> GetPassInfo(string internalID)
        {
            var internalIDParameter = internalID != null ?
                new ObjectParameter("InternalID", internalID) :
                new ObjectParameter("InternalID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPassInfo_Result>("GetPassInfo", internalIDParameter);
        }
    
        public virtual ObjectResult<GetPassPrintData_Result> GetPassPrintData(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, Nullable<int> passCaseID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var passCaseIDParameter = passCaseID.HasValue ?
                new ObjectParameter("PassCaseID", passCaseID) :
                new ObjectParameter("PassCaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPassPrintData_Result>("GetPassPrintData", systemIDParameter, bpIDParameter, employeeIDParameter, passCaseIDParameter);
        }
    
        public virtual ObjectResult<GetPhoto_Result> GetPhoto(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPhoto_Result>("GetPhoto", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetPresenceData_Result> GetPresenceData(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> companyLevel, Nullable<int> accessAreaID, Nullable<int> evaluationPeriod, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateUntil, Nullable<int> presenceLevel)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companyLevelParameter = companyLevel.HasValue ?
                new ObjectParameter("CompanyLevel", companyLevel) :
                new ObjectParameter("CompanyLevel", typeof(int));
    
            var accessAreaIDParameter = accessAreaID.HasValue ?
                new ObjectParameter("AccessAreaID", accessAreaID) :
                new ObjectParameter("AccessAreaID", typeof(int));
    
            var evaluationPeriodParameter = evaluationPeriod.HasValue ?
                new ObjectParameter("EvaluationPeriod", evaluationPeriod) :
                new ObjectParameter("EvaluationPeriod", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateUntilParameter = dateUntil.HasValue ?
                new ObjectParameter("DateUntil", dateUntil) :
                new ObjectParameter("DateUntil", typeof(System.DateTime));
    
            var presenceLevelParameter = presenceLevel.HasValue ?
                new ObjectParameter("PresenceLevel", presenceLevel) :
                new ObjectParameter("PresenceLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPresenceData_Result>("GetPresenceData", systemIDParameter, bpIDParameter, companyIDParameter, companyLevelParameter, accessAreaIDParameter, evaluationPeriodParameter, dateFromParameter, dateUntilParameter, presenceLevelParameter);
        }
    
        public virtual ObjectResult<GetPresenceDataNow_Result> GetPresenceDataNow(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> companyLevel, Nullable<int> accessAreaID, Nullable<System.DateTime> presenceDay, Nullable<bool> presentOnly)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companyLevelParameter = companyLevel.HasValue ?
                new ObjectParameter("CompanyLevel", companyLevel) :
                new ObjectParameter("CompanyLevel", typeof(int));
    
            var accessAreaIDParameter = accessAreaID.HasValue ?
                new ObjectParameter("AccessAreaID", accessAreaID) :
                new ObjectParameter("AccessAreaID", typeof(int));
    
            var presenceDayParameter = presenceDay.HasValue ?
                new ObjectParameter("PresenceDay", presenceDay) :
                new ObjectParameter("PresenceDay", typeof(System.DateTime));
    
            var presentOnlyParameter = presentOnly.HasValue ?
                new ObjectParameter("PresentOnly", presentOnly) :
                new ObjectParameter("PresentOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPresenceDataNow_Result>("GetPresenceDataNow", systemIDParameter, bpIDParameter, companyIDParameter, companyLevelParameter, accessAreaIDParameter, presenceDayParameter, presentOnlyParameter);
        }
    
        public virtual ObjectResult<GetPresentPersonsCount_Result> GetPresentPersonsCount(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPresentPersonsCount_Result>("GetPresentPersonsCount", systemIDParameter, bpIDParameter);
        }
    
        public virtual ObjectResult<GetPresentPersonsPerAccessArea_Result> GetPresentPersonsPerAccessArea(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPresentPersonsPerAccessArea_Result>("GetPresentPersonsPerAccessArea", systemIDParameter, bpIDParameter);
        }
    
        public virtual ObjectResult<GetProcessUsers_Result> GetProcessUsers(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> dialogID, Nullable<int> actionID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var dialogIDParameter = dialogID.HasValue ?
                new ObjectParameter("DialogID", dialogID) :
                new ObjectParameter("DialogID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProcessUsers_Result>("GetProcessUsers", systemIDParameter, bpIDParameter, dialogIDParameter, actionIDParameter);
        }
    
        public virtual ObjectResult<GetRelevantDocuments_Result> GetRelevantDocuments(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> relevantDocumentID, string languageID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var relevantDocumentIDParameter = relevantDocumentID.HasValue ?
                new ObjectParameter("RelevantDocumentID", relevantDocumentID) :
                new ObjectParameter("RelevantDocumentID", typeof(int));
    
            var languageIDParameter = languageID != null ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRelevantDocuments_Result>("GetRelevantDocuments", systemIDParameter, bpIDParameter, relevantDocumentIDParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<GetReportMinWageData_Result> GetReportMinWageData(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> monthFrom, Nullable<System.DateTime> monthUntil, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var monthFromParameter = monthFrom.HasValue ?
                new ObjectParameter("MonthFrom", monthFrom) :
                new ObjectParameter("MonthFrom", typeof(System.DateTime));
    
            var monthUntilParameter = monthUntil.HasValue ?
                new ObjectParameter("MonthUntil", monthUntil) :
                new ObjectParameter("MonthUntil", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportMinWageData_Result>("GetReportMinWageData", systemIDParameter, bpIDParameter, monthFromParameter, monthUntilParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetReportMinWageEmployeeData_Result> GetReportMinWageEmployeeData(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> monthFrom, Nullable<System.DateTime> monthUntil, Nullable<int> companyID, Nullable<bool> showCorrectMonths)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var monthFromParameter = monthFrom.HasValue ?
                new ObjectParameter("MonthFrom", monthFrom) :
                new ObjectParameter("MonthFrom", typeof(System.DateTime));
    
            var monthUntilParameter = monthUntil.HasValue ?
                new ObjectParameter("MonthUntil", monthUntil) :
                new ObjectParameter("MonthUntil", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var showCorrectMonthsParameter = showCorrectMonths.HasValue ?
                new ObjectParameter("ShowCorrectMonths", showCorrectMonths) :
                new ObjectParameter("ShowCorrectMonths", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportMinWageEmployeeData_Result>("GetReportMinWageEmployeeData", systemIDParameter, bpIDParameter, monthFromParameter, monthUntilParameter, companyIDParameter, showCorrectMonthsParameter);
        }
    
        public virtual ObjectResult<GetReportMWAttestationRequestDetails_Result> GetReportMWAttestationRequestDetails(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> monthUntil, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var monthUntilParameter = monthUntil.HasValue ?
                new ObjectParameter("MonthUntil", monthUntil) :
                new ObjectParameter("MonthUntil", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportMWAttestationRequestDetails_Result>("GetReportMWAttestationRequestDetails", systemIDParameter, bpIDParameter, monthUntilParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetReportMWAttestationRequestHeaders_Result> GetReportMWAttestationRequestHeaders(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> monthUntil, Nullable<int> companyID, Nullable<bool> mCOnly)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var monthUntilParameter = monthUntil.HasValue ?
                new ObjectParameter("MonthUntil", monthUntil) :
                new ObjectParameter("MonthUntil", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var mCOnlyParameter = mCOnly.HasValue ?
                new ObjectParameter("MCOnly", mCOnly) :
                new ObjectParameter("MCOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportMWAttestationRequestHeaders_Result>("GetReportMWAttestationRequestHeaders", systemIDParameter, bpIDParameter, monthUntilParameter, companyIDParameter, mCOnlyParameter);
        }
    
        public virtual ObjectResult<GetReportTariffContractHistory_Result> GetReportTariffContractHistory(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportTariffContractHistory_Result>("GetReportTariffContractHistory", systemIDParameter, bpIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetShortTermPasses_Result> GetShortTermPasses(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> shortTermPassID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var shortTermPassIDParameter = shortTermPassID.HasValue ?
                new ObjectParameter("ShortTermPassID", shortTermPassID) :
                new ObjectParameter("ShortTermPassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetShortTermPasses_Result>("GetShortTermPasses", systemIDParameter, bpIDParameter, shortTermPassIDParameter);
        }
    
        public virtual ObjectResult<GetShortTermPassPrintData_Result> GetShortTermPassPrintData(Nullable<int> systemID, Nullable<int> bpID, string userName)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetShortTermPassPrintData_Result>("GetShortTermPassPrintData", systemIDParameter, bpIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> GetShortTermPassTemplate(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> shortTermPassTypeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var shortTermPassTypeIDParameter = shortTermPassTypeID.HasValue ?
                new ObjectParameter("ShortTermPassTypeID", shortTermPassTypeID) :
                new ObjectParameter("ShortTermPassTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetShortTermPassTemplate", systemIDParameter, bpIDParameter, shortTermPassTypeIDParameter);
        }
    
        public virtual ObjectResult<GetShortTermVisitors_Result> GetShortTermVisitors(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetShortTermVisitors_Result>("GetShortTermVisitors", systemIDParameter, bpIDParameter);
        }
    
        public virtual ObjectResult<GetSubContractors_Result> GetSubContractors(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubContractors_Result>("GetSubContractors", systemIDParameter, bpIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetTemplates_Result> GetTemplates(Nullable<int> systemID, Nullable<int> bpID, string dialogName, Nullable<bool> withFileData)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var dialogNameParameter = dialogName != null ?
                new ObjectParameter("DialogName", dialogName) :
                new ObjectParameter("DialogName", typeof(string));
    
            var withFileDataParameter = withFileData.HasValue ?
                new ObjectParameter("WithFileData", withFileData) :
                new ObjectParameter("WithFileData", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTemplates_Result>("GetTemplates", systemIDParameter, bpIDParameter, dialogNameParameter, withFileDataParameter);
        }
    
        public virtual ObjectResult<GetTradeContainerManagement_Result> GetTradeContainerManagement(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> tradeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var tradeIDParameter = tradeID.HasValue ?
                new ObjectParameter("TradeID", tradeID) :
                new ObjectParameter("TradeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTradeContainerManagement_Result>("GetTradeContainerManagement", systemIDParameter, bpIDParameter, tradeIDParameter);
        }
    
        public virtual ObjectResult<GetTradeReportData_Result> GetTradeReportData(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateUntil)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateUntilParameter = dateUntil.HasValue ?
                new ObjectParameter("DateUntil", dateUntil) :
                new ObjectParameter("DateUntil", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTradeReportData_Result>("GetTradeReportData", systemIDParameter, bpIDParameter, dateFromParameter, dateUntilParameter);
        }
    
        public virtual ObjectResult<GetUserDuplicates_Result> GetUserDuplicates(Nullable<int> systemID, Nullable<int> userID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDuplicates_Result>("GetUserDuplicates", systemIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetUserInfo_Result> GetUserInfo(string loginName)
        {
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserInfo_Result>("GetUserInfo", loginNameParameter);
        }
    
        public virtual ObjectResult<GetViewState_Result> GetViewState(Nullable<System.Guid> vsId)
        {
            var vsIdParameter = vsId.HasValue ?
                new ObjectParameter("VsId", vsId) :
                new ObjectParameter("VsId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetViewState_Result>("GetViewState", vsIdParameter);
        }
    
        public virtual ObjectResult<GetVisitorAccessAreas_Result> GetVisitorAccessAreas(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> shortTermVisitorID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var shortTermVisitorIDParameter = shortTermVisitorID.HasValue ?
                new ObjectParameter("ShortTermVisitorID", shortTermVisitorID) :
                new ObjectParameter("ShortTermVisitorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVisitorAccessAreas_Result>("GetVisitorAccessAreas", systemIDParameter, bpIDParameter, shortTermVisitorIDParameter);
        }
    
        public virtual ObjectResult<HasValidDocumentRelevantFor_Result> HasValidDocumentRelevantFor(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HasValidDocumentRelevantFor_Result>("HasValidDocumentRelevantFor", systemIDParameter, bpIDParameter, employeeIDParameter);
        }
    
        public virtual int InsertViewState(Nullable<System.Guid> vsId, byte[] vsData, Nullable<System.DateTime> vsTimeStamp, string vsSession)
        {
            var vsIdParameter = vsId.HasValue ?
                new ObjectParameter("VsId", vsId) :
                new ObjectParameter("VsId", typeof(System.Guid));
    
            var vsDataParameter = vsData != null ?
                new ObjectParameter("VsData", vsData) :
                new ObjectParameter("VsData", typeof(byte[]));
    
            var vsTimeStampParameter = vsTimeStamp.HasValue ?
                new ObjectParameter("VsTimeStamp", vsTimeStamp) :
                new ObjectParameter("VsTimeStamp", typeof(System.DateTime));
    
            var vsSessionParameter = vsSession != null ?
                new ObjectParameter("VsSession", vsSession) :
                new ObjectParameter("VsSession", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertViewState", vsIdParameter, vsDataParameter, vsTimeStampParameter, vsSessionParameter);
        }
    
        public virtual int LockPass(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, string reason, string userName)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LockPass", systemIDParameter, bpIDParameter, employeeIDParameter, reasonParameter, userNameParameter);
        }
    
        public virtual int MoveCompanyAttribute(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> attributeID, string user)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var attributeIDParameter = attributeID.HasValue ?
                new ObjectParameter("AttributeID", attributeID) :
                new ObjectParameter("AttributeID", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveCompanyAttribute", systemIDParameter, bpIDParameter, companyIDParameter, attributeIDParameter, userParameter);
        }
    
        public virtual int MoveCompanyTrade(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> tradeID, string user)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var tradeIDParameter = tradeID.HasValue ?
                new ObjectParameter("TradeID", tradeID) :
                new ObjectParameter("TradeID", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveCompanyTrade", systemIDParameter, bpIDParameter, companyIDParameter, tradeIDParameter, userParameter);
        }
    
        public virtual int MoveEmployeeAccessArea(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, Nullable<int> accessAreaID, string user)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var accessAreaIDParameter = accessAreaID.HasValue ?
                new ObjectParameter("AccessAreaID", accessAreaID) :
                new ObjectParameter("AccessAreaID", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveEmployeeAccessArea", systemIDParameter, bpIDParameter, employeeIDParameter, accessAreaIDParameter, userParameter);
        }
    
        public virtual int MoveEmployeeQualification(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, Nullable<int> staffRoleID, string user)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var staffRoleIDParameter = staffRoleID.HasValue ?
                new ObjectParameter("StaffRoleID", staffRoleID) :
                new ObjectParameter("StaffRoleID", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveEmployeeQualification", systemIDParameter, bpIDParameter, employeeIDParameter, staffRoleIDParameter, userParameter);
        }
    
        public virtual int MoveShortTermAccessArea(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> shortTermVisitorID, Nullable<int> accessAreaID, string user)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var shortTermVisitorIDParameter = shortTermVisitorID.HasValue ?
                new ObjectParameter("ShortTermVisitorID", shortTermVisitorID) :
                new ObjectParameter("ShortTermVisitorID", typeof(int));
    
            var accessAreaIDParameter = accessAreaID.HasValue ?
                new ObjectParameter("AccessAreaID", accessAreaID) :
                new ObjectParameter("AccessAreaID", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveShortTermAccessArea", systemIDParameter, bpIDParameter, shortTermVisitorIDParameter, accessAreaIDParameter, userParameter);
        }
    
        public virtual ObjectResult<PrintPass_Result> PrintPass(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> employeeID, Nullable<int> replacementPassCaseID, string reason, string userName, string deactivationMessage)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var replacementPassCaseIDParameter = replacementPassCaseID.HasValue ?
                new ObjectParameter("ReplacementPassCaseID", replacementPassCaseID) :
                new ObjectParameter("ReplacementPassCaseID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var deactivationMessageParameter = deactivationMessage != null ?
                new ObjectParameter("DeactivationMessage", deactivationMessage) :
                new ObjectParameter("DeactivationMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrintPass_Result>("PrintPass", systemIDParameter, bpIDParameter, employeeIDParameter, replacementPassCaseIDParameter, reasonParameter, userNameParameter, deactivationMessageParameter);
        }
    
        public virtual int ProcessEventDone(Nullable<int> systemID, Nullable<int> dialogID, Nullable<int> actionID, Nullable<int> refID, Nullable<int> userIDExecutive, string doneFrom, Nullable<int> statusID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var dialogIDParameter = dialogID.HasValue ?
                new ObjectParameter("DialogID", dialogID) :
                new ObjectParameter("DialogID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var refIDParameter = refID.HasValue ?
                new ObjectParameter("RefID", refID) :
                new ObjectParameter("RefID", typeof(int));
    
            var userIDExecutiveParameter = userIDExecutive.HasValue ?
                new ObjectParameter("UserIDExecutive", userIDExecutive) :
                new ObjectParameter("UserIDExecutive", typeof(int));
    
            var doneFromParameter = doneFrom != null ?
                new ObjectParameter("DoneFrom", doneFrom) :
                new ObjectParameter("DoneFrom", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessEventDone", systemIDParameter, dialogIDParameter, actionIDParameter, refIDParameter, userIDExecutiveParameter, doneFromParameter, statusIDParameter);
        }
    
        public virtual int ResetAccessRights(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> passID, Nullable<int> ownerID, string deactivationMessage)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var passIDParameter = passID.HasValue ?
                new ObjectParameter("PassID", passID) :
                new ObjectParameter("PassID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var deactivationMessageParameter = deactivationMessage != null ?
                new ObjectParameter("DeactivationMessage", deactivationMessage) :
                new ObjectParameter("DeactivationMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetAccessRights", systemIDParameter, bpIDParameter, passIDParameter, ownerIDParameter, deactivationMessageParameter);
        }
    
        public virtual int ResetDateRange(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateUntil, Nullable<int> ownerID, Nullable<int> passType)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateUntilParameter = dateUntil.HasValue ?
                new ObjectParameter("DateUntil", dateUntil) :
                new ObjectParameter("DateUntil", typeof(System.DateTime));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var passTypeParameter = passType.HasValue ?
                new ObjectParameter("PassType", passType) :
                new ObjectParameter("PassType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetDateRange", systemIDParameter, bpIDParameter, dateFromParameter, dateUntilParameter, ownerIDParameter, passTypeParameter);
        }
    
        public virtual int SaveControlStateToDB(Nullable<int> systemID, Nullable<int> userID, string userKey, string userSettings)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var userSettingsParameter = userSettings != null ?
                new ObjectParameter("UserSettings", userSettings) :
                new ObjectParameter("UserSettings", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveControlStateToDB", systemIDParameter, userIDParameter, userKeyParameter, userSettingsParameter);
        }
    
        public virtual int TreeItemHasActiveChildItems(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> roleID, Nullable<int> dialogID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var dialogIDParameter = dialogID.HasValue ?
                new ObjectParameter("DialogID", dialogID) :
                new ObjectParameter("DialogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TreeItemHasActiveChildItems", systemIDParameter, bpIDParameter, roleIDParameter, dialogIDParameter);
        }
    
        public virtual ObjectResult<GetTariffData_Result> GetTariffData(Nullable<int> systemID, Nullable<int> tariffID, Nullable<int> tariffContractID, Nullable<int> tariffScopeID, Nullable<int> bpID, Nullable<int> companyID, Nullable<int> evaluationPeriod, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateUntil, Nullable<int> reportVariant)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var tariffIDParameter = tariffID.HasValue ?
                new ObjectParameter("TariffID", tariffID) :
                new ObjectParameter("TariffID", typeof(int));
    
            var tariffContractIDParameter = tariffContractID.HasValue ?
                new ObjectParameter("TariffContractID", tariffContractID) :
                new ObjectParameter("TariffContractID", typeof(int));
    
            var tariffScopeIDParameter = tariffScopeID.HasValue ?
                new ObjectParameter("TariffScopeID", tariffScopeID) :
                new ObjectParameter("TariffScopeID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var evaluationPeriodParameter = evaluationPeriod.HasValue ?
                new ObjectParameter("EvaluationPeriod", evaluationPeriod) :
                new ObjectParameter("EvaluationPeriod", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateUntilParameter = dateUntil.HasValue ?
                new ObjectParameter("DateUntil", dateUntil) :
                new ObjectParameter("DateUntil", typeof(System.DateTime));
    
            var reportVariantParameter = reportVariant.HasValue ?
                new ObjectParameter("ReportVariant", reportVariant) :
                new ObjectParameter("ReportVariant", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTariffData_Result>("GetTariffData", systemIDParameter, tariffIDParameter, tariffContractIDParameter, tariffScopeIDParameter, bpIDParameter, companyIDParameter, evaluationPeriodParameter, dateFromParameter, dateUntilParameter, reportVariantParameter);
        }
    
        public virtual ObjectResult<GetPresentFirstAiders_Result> GetPresentFirstAiders(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPresentFirstAiders_Result>("GetPresentFirstAiders", systemIDParameter, bpIDParameter);
        }
    
        public virtual ObjectResult<GetUsersData_Result> GetUsersData(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> companyCentralID, Nullable<int> userID, Nullable<int> usertype, string filter)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var companyCentralIDParameter = companyCentralID.HasValue ?
                new ObjectParameter("CompanyCentralID", companyCentralID) :
                new ObjectParameter("CompanyCentralID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var usertypeParameter = usertype.HasValue ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(int));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersData_Result>("GetUsersData", systemIDParameter, bpIDParameter, companyCentralIDParameter, userIDParameter, usertypeParameter, filterParameter);
        }
    
        public virtual int UpdateStatistics(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> statisticsDate)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var statisticsDateParameter = statisticsDate.HasValue ?
                new ObjectParameter("StatisticsDate", statisticsDate) :
                new ObjectParameter("StatisticsDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStatistics", systemIDParameter, bpIDParameter, statisticsDateParameter);
        }
    
        public virtual ObjectResult<GetStatistics_Result> GetStatistics(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> statisticsDate, Nullable<int> evaluationPeriod)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var statisticsDateParameter = statisticsDate.HasValue ?
                new ObjectParameter("StatisticsDate", statisticsDate) :
                new ObjectParameter("StatisticsDate", typeof(System.DateTime));
    
            var evaluationPeriodParameter = evaluationPeriod.HasValue ?
                new ObjectParameter("EvaluationPeriod", evaluationPeriod) :
                new ObjectParameter("EvaluationPeriod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStatistics_Result>("GetStatistics", systemIDParameter, bpIDParameter, statisticsDateParameter, evaluationPeriodParameter);
        }
    
        public virtual ObjectResult<GetStatisticsAccessEvents_Result> GetStatisticsAccessEvents(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> statisticsDate, Nullable<int> evaluationPeriod)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var statisticsDateParameter = statisticsDate.HasValue ?
                new ObjectParameter("StatisticsDate", statisticsDate) :
                new ObjectParameter("StatisticsDate", typeof(System.DateTime));
    
            var evaluationPeriodParameter = evaluationPeriod.HasValue ?
                new ObjectParameter("EvaluationPeriod", evaluationPeriod) :
                new ObjectParameter("EvaluationPeriod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStatisticsAccessEvents_Result>("GetStatisticsAccessEvents", systemIDParameter, bpIDParameter, statisticsDateParameter, evaluationPeriodParameter);
        }
    
        public virtual ObjectResult<GetStatisticsTerminals_Result> GetStatisticsTerminals(Nullable<int> systemID, Nullable<int> bpID, Nullable<System.DateTime> statisticsDate, Nullable<int> evaluationPeriod)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var statisticsDateParameter = statisticsDate.HasValue ?
                new ObjectParameter("StatisticsDate", statisticsDate) :
                new ObjectParameter("StatisticsDate", typeof(System.DateTime));
    
            var evaluationPeriodParameter = evaluationPeriod.HasValue ?
                new ObjectParameter("EvaluationPeriod", evaluationPeriod) :
                new ObjectParameter("EvaluationPeriod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStatisticsTerminals_Result>("GetStatisticsTerminals", systemIDParameter, bpIDParameter, statisticsDateParameter, evaluationPeriodParameter);
        }
    
        public virtual ObjectResult<GetFieldsConfig_Result> GetFieldsConfig(Nullable<int> systemID, Nullable<int> bpID, Nullable<int> roleID, Nullable<int> dialogID, Nullable<int> actionID, string languageID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var dialogIDParameter = dialogID.HasValue ?
                new ObjectParameter("DialogID", dialogID) :
                new ObjectParameter("DialogID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var languageIDParameter = languageID != null ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFieldsConfig_Result>("GetFieldsConfig", systemIDParameter, bpIDParameter, roleIDParameter, dialogIDParameter, actionIDParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<GetCompaniesCentralNotAddedToBp_Result> GetCompaniesCentralNotAddedToBp(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompaniesCentralNotAddedToBp_Result>("GetCompaniesCentralNotAddedToBp", systemIDParameter, bpIDParameter);
        }
    
        public virtual int SwitchTariffScopeEastToWest(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SwitchTariffScopeEastToWest", systemIDParameter, bpIDParameter);
        }
    
        public virtual int UpdateProcessEventsStatus(Nullable<int> systemID, Nullable<int> bpID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("SystemID", systemID) :
                new ObjectParameter("SystemID", typeof(int));
    
            var bpIDParameter = bpID.HasValue ?
                new ObjectParameter("BpID", bpID) :
                new ObjectParameter("BpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProcessEventsStatus", systemIDParameter, bpIDParameter);
        }
    }
}
