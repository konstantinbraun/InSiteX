//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InSite.App.AccessServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TerminalStatus", Namespace="http://schemas.datacontract.org/2004/07/InsiteServices.Models")]
    [System.SerializableAttribute()]
    public partial class TerminalStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessAreaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BfIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DesignationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmwareVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActivatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SoftwareVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StatusTimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SystemIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TerminalIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TerminalTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessAreaID {
            get {
                return this.AccessAreaIDField;
            }
            set {
                if ((this.AccessAreaIDField.Equals(value) != true)) {
                    this.AccessAreaIDField = value;
                    this.RaisePropertyChanged("AccessAreaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BfID {
            get {
                return this.BfIDField;
            }
            set {
                if ((this.BfIDField.Equals(value) != true)) {
                    this.BfIDField = value;
                    this.RaisePropertyChanged("BfID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BpID {
            get {
                return this.BpIDField;
            }
            set {
                if ((this.BpIDField.Equals(value) != true)) {
                    this.BpIDField = value;
                    this.RaisePropertyChanged("BpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Designation {
            get {
                return this.DesignationField;
            }
            set {
                if ((object.ReferenceEquals(this.DesignationField, value) != true)) {
                    this.DesignationField = value;
                    this.RaisePropertyChanged("Designation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmwareVersion {
            get {
                return this.FirmwareVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmwareVersionField, value) != true)) {
                    this.FirmwareVersionField = value;
                    this.RaisePropertyChanged("FirmwareVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActivated {
            get {
                return this.IsActivatedField;
            }
            set {
                if ((this.IsActivatedField.Equals(value) != true)) {
                    this.IsActivatedField = value;
                    this.RaisePropertyChanged("IsActivated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnline {
            get {
                return this.IsOnlineField;
            }
            set {
                if ((this.IsOnlineField.Equals(value) != true)) {
                    this.IsOnlineField = value;
                    this.RaisePropertyChanged("IsOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SoftwareVersion {
            get {
                return this.SoftwareVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.SoftwareVersionField, value) != true)) {
                    this.SoftwareVersionField = value;
                    this.RaisePropertyChanged("SoftwareVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StatusTimestamp {
            get {
                return this.StatusTimestampField;
            }
            set {
                if ((this.StatusTimestampField.Equals(value) != true)) {
                    this.StatusTimestampField = value;
                    this.RaisePropertyChanged("StatusTimestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SystemID {
            get {
                return this.SystemIDField;
            }
            set {
                if ((this.SystemIDField.Equals(value) != true)) {
                    this.SystemIDField = value;
                    this.RaisePropertyChanged("SystemID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TerminalID {
            get {
                return this.TerminalIDField;
            }
            set {
                if ((this.TerminalIDField.Equals(value) != true)) {
                    this.TerminalIDField = value;
                    this.RaisePropertyChanged("TerminalID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TerminalType {
            get {
                return this.TerminalTypeField;
            }
            set {
                if ((this.TerminalTypeField.Equals(value) != true)) {
                    this.TerminalTypeField = value;
                    this.RaisePropertyChanged("TerminalType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessRight", Namespace="http://schemas.datacontract.org/2004/07/InsiteServices.Models")]
    [System.SerializableAttribute()]
    public partial class AccessRight : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InSite.App.AccessServices.AccessArea[] AccessAreasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessRightIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EditOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmployeeFirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmployeeLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InternalIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LanguageIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LockReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] MetricDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PhotoDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ShowMessageFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ShowMessageUntilField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SystemIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TradeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ValidUntilField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InSite.App.AccessServices.AccessArea[] AccessAreas {
            get {
                return this.AccessAreasField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessAreasField, value) != true)) {
                    this.AccessAreasField = value;
                    this.RaisePropertyChanged("AccessAreas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessRightID {
            get {
                return this.AccessRightIDField;
            }
            set {
                if ((this.AccessRightIDField.Equals(value) != true)) {
                    this.AccessRightIDField = value;
                    this.RaisePropertyChanged("AccessRightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EditOn {
            get {
                return this.EditOnField;
            }
            set {
                if ((this.EditOnField.Equals(value) != true)) {
                    this.EditOnField = value;
                    this.RaisePropertyChanged("EditOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeFirstName {
            get {
                return this.EmployeeFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeFirstNameField, value) != true)) {
                    this.EmployeeFirstNameField = value;
                    this.RaisePropertyChanged("EmployeeFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeLastName {
            get {
                return this.EmployeeLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeLastNameField, value) != true)) {
                    this.EmployeeLastNameField = value;
                    this.RaisePropertyChanged("EmployeeLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalID {
            get {
                return this.ExternalIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIDField, value) != true)) {
                    this.ExternalIDField = value;
                    this.RaisePropertyChanged("ExternalID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InternalID {
            get {
                return this.InternalIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InternalIDField, value) != true)) {
                    this.InternalIDField = value;
                    this.RaisePropertyChanged("InternalID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LanguageID {
            get {
                return this.LanguageIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageIDField, value) != true)) {
                    this.LanguageIDField = value;
                    this.RaisePropertyChanged("LanguageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockFlag {
            get {
                return this.LockFlagField;
            }
            set {
                if ((this.LockFlagField.Equals(value) != true)) {
                    this.LockFlagField = value;
                    this.RaisePropertyChanged("LockFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LockReason {
            get {
                return this.LockReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.LockReasonField, value) != true)) {
                    this.LockReasonField = value;
                    this.RaisePropertyChanged("LockReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] MetricData {
            get {
                return this.MetricDataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetricDataField, value) != true)) {
                    this.MetricDataField = value;
                    this.RaisePropertyChanged("MetricData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PhotoData {
            get {
                return this.PhotoDataField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoDataField, value) != true)) {
                    this.PhotoDataField = value;
                    this.RaisePropertyChanged("PhotoData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ShowMessageFrom {
            get {
                return this.ShowMessageFromField;
            }
            set {
                if ((this.ShowMessageFromField.Equals(value) != true)) {
                    this.ShowMessageFromField = value;
                    this.RaisePropertyChanged("ShowMessageFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ShowMessageUntil {
            get {
                return this.ShowMessageUntilField;
            }
            set {
                if ((this.ShowMessageUntilField.Equals(value) != true)) {
                    this.ShowMessageUntilField = value;
                    this.RaisePropertyChanged("ShowMessageUntil");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SystemID {
            get {
                return this.SystemIDField;
            }
            set {
                if ((this.SystemIDField.Equals(value) != true)) {
                    this.SystemIDField = value;
                    this.RaisePropertyChanged("SystemID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TradeName {
            get {
                return this.TradeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TradeNameField, value) != true)) {
                    this.TradeNameField = value;
                    this.RaisePropertyChanged("TradeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ValidUntil {
            get {
                return this.ValidUntilField;
            }
            set {
                if ((this.ValidUntilField.Equals(value) != true)) {
                    this.ValidUntilField = value;
                    this.RaisePropertyChanged("ValidUntil");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessArea", Namespace="http://schemas.datacontract.org/2004/07/InsiteServices.Models")]
    [System.SerializableAttribute()]
    public partial class AccessArea : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessAreaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccessAreaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessRightIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AdditionalRightsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BfIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TimeFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeSlotIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TimeUntilField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValidDaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ValidFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ValidUntilField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessAreaID {
            get {
                return this.AccessAreaIDField;
            }
            set {
                if ((this.AccessAreaIDField.Equals(value) != true)) {
                    this.AccessAreaIDField = value;
                    this.RaisePropertyChanged("AccessAreaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessAreaName {
            get {
                return this.AccessAreaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessAreaNameField, value) != true)) {
                    this.AccessAreaNameField = value;
                    this.RaisePropertyChanged("AccessAreaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessRightID {
            get {
                return this.AccessRightIDField;
            }
            set {
                if ((this.AccessRightIDField.Equals(value) != true)) {
                    this.AccessRightIDField = value;
                    this.RaisePropertyChanged("AccessRightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdditionalRights {
            get {
                return this.AdditionalRightsField;
            }
            set {
                if ((this.AdditionalRightsField.Equals(value) != true)) {
                    this.AdditionalRightsField = value;
                    this.RaisePropertyChanged("AdditionalRights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BfID {
            get {
                return this.BfIDField;
            }
            set {
                if ((this.BfIDField.Equals(value) != true)) {
                    this.BfIDField = value;
                    this.RaisePropertyChanged("BfID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BpID {
            get {
                return this.BpIDField;
            }
            set {
                if ((this.BpIDField.Equals(value) != true)) {
                    this.BpIDField = value;
                    this.RaisePropertyChanged("BpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TimeFrom {
            get {
                return this.TimeFromField;
            }
            set {
                if ((this.TimeFromField.Equals(value) != true)) {
                    this.TimeFromField = value;
                    this.RaisePropertyChanged("TimeFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeSlotID {
            get {
                return this.TimeSlotIDField;
            }
            set {
                if ((this.TimeSlotIDField.Equals(value) != true)) {
                    this.TimeSlotIDField = value;
                    this.RaisePropertyChanged("TimeSlotID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TimeUntil {
            get {
                return this.TimeUntilField;
            }
            set {
                if ((this.TimeUntilField.Equals(value) != true)) {
                    this.TimeUntilField = value;
                    this.RaisePropertyChanged("TimeUntil");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValidDays {
            get {
                return this.ValidDaysField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidDaysField, value) != true)) {
                    this.ValidDaysField = value;
                    this.RaisePropertyChanged("ValidDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ValidFrom {
            get {
                return this.ValidFromField;
            }
            set {
                if ((this.ValidFromField.Equals(value) != true)) {
                    this.ValidFromField = value;
                    this.RaisePropertyChanged("ValidFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ValidUntil {
            get {
                return this.ValidUntilField;
            }
            set {
                if ((this.ValidUntilField.Equals(value) != true)) {
                    this.ValidUntilField = value;
                    this.RaisePropertyChanged("ValidUntil");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessEvent", Namespace="http://schemas.datacontract.org/2004/07/InsiteServices.Models")]
    [System.SerializableAttribute()]
    public partial class AccessEvent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessAreaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AccessEventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AccessOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BfIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DenialReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EntryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InternalIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnlineAccessEventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSystemEventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MessageShownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PoeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SystemIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessAreaID {
            get {
                return this.AccessAreaIDField;
            }
            set {
                if ((this.AccessAreaIDField.Equals(value) != true)) {
                    this.AccessAreaIDField = value;
                    this.RaisePropertyChanged("AccessAreaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AccessEventID {
            get {
                return this.AccessEventIDField;
            }
            set {
                if ((this.AccessEventIDField.Equals(value) != true)) {
                    this.AccessEventIDField = value;
                    this.RaisePropertyChanged("AccessEventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AccessOn {
            get {
                return this.AccessOnField;
            }
            set {
                if ((this.AccessOnField.Equals(value) != true)) {
                    this.AccessOnField = value;
                    this.RaisePropertyChanged("AccessOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessResult {
            get {
                return this.AccessResultField;
            }
            set {
                if ((this.AccessResultField.Equals(value) != true)) {
                    this.AccessResultField = value;
                    this.RaisePropertyChanged("AccessResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessType {
            get {
                return this.AccessTypeField;
            }
            set {
                if ((this.AccessTypeField.Equals(value) != true)) {
                    this.AccessTypeField = value;
                    this.RaisePropertyChanged("AccessType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BfID {
            get {
                return this.BfIDField;
            }
            set {
                if ((this.BfIDField.Equals(value) != true)) {
                    this.BfIDField = value;
                    this.RaisePropertyChanged("BfID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BpID {
            get {
                return this.BpIDField;
            }
            set {
                if ((this.BpIDField.Equals(value) != true)) {
                    this.BpIDField = value;
                    this.RaisePropertyChanged("BpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DenialReason {
            get {
                return this.DenialReasonField;
            }
            set {
                if ((this.DenialReasonField.Equals(value) != true)) {
                    this.DenialReasonField = value;
                    this.RaisePropertyChanged("DenialReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntryID {
            get {
                return this.EntryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EntryIDField, value) != true)) {
                    this.EntryIDField = value;
                    this.RaisePropertyChanged("EntryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InternalID {
            get {
                return this.InternalIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InternalIDField, value) != true)) {
                    this.InternalIDField = value;
                    this.RaisePropertyChanged("InternalID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnlineAccessEvent {
            get {
                return this.IsOnlineAccessEventField;
            }
            set {
                if ((this.IsOnlineAccessEventField.Equals(value) != true)) {
                    this.IsOnlineAccessEventField = value;
                    this.RaisePropertyChanged("IsOnlineAccessEvent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystemEvent {
            get {
                return this.IsSystemEventField;
            }
            set {
                if ((this.IsSystemEventField.Equals(value) != true)) {
                    this.IsSystemEventField = value;
                    this.RaisePropertyChanged("IsSystemEvent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MessageShown {
            get {
                return this.MessageShownField;
            }
            set {
                if ((this.MessageShownField.Equals(value) != true)) {
                    this.MessageShownField = value;
                    this.RaisePropertyChanged("MessageShown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PoeID {
            get {
                return this.PoeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PoeIDField, value) != true)) {
                    this.PoeIDField = value;
                    this.RaisePropertyChanged("PoeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SystemID {
            get {
                return this.SystemIDField;
            }
            set {
                if ((this.SystemIDField.Equals(value) != true)) {
                    this.SystemIDField = value;
                    this.RaisePropertyChanged("SystemID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccessServices.IAccessService")]
    public interface IAccessService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/PutSystemState", ReplyAction="http://tempuri.org/IAccessService/PutSystemStateResponse")]
        void PutSystemState(int accessSystemID, string authID, int bpID, bool allTerminalsOnline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/PutSystemState", ReplyAction="http://tempuri.org/IAccessService/PutSystemStateResponse")]
        System.Threading.Tasks.Task PutSystemStateAsync(int accessSystemID, string authID, int bpID, bool allTerminalsOnline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/PutTerminalStatus", ReplyAction="http://tempuri.org/IAccessService/PutTerminalStatusResponse")]
        void PutTerminalStatus(int accessSystemID, string authID, InSite.App.AccessServices.TerminalStatus[] status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/PutTerminalStatus", ReplyAction="http://tempuri.org/IAccessService/PutTerminalStatusResponse")]
        System.Threading.Tasks.Task PutTerminalStatusAsync(int accessSystemID, string authID, InSite.App.AccessServices.TerminalStatus[] status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/GetAccessRights", ReplyAction="http://tempuri.org/IAccessService/GetAccessRightsResponse")]
        InSite.App.AccessServices.AccessRight[] GetAccessRights(int accessSystemID, string authID, bool initial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/GetAccessRights", ReplyAction="http://tempuri.org/IAccessService/GetAccessRightsResponse")]
        System.Threading.Tasks.Task<InSite.App.AccessServices.AccessRight[]> GetAccessRightsAsync(int accessSystemID, string authID, bool initial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/PutAccessEvent", ReplyAction="http://tempuri.org/IAccessService/PutAccessEventResponse")]
        int PutAccessEvent(int accessSystemID, string authID, InSite.App.AccessServices.AccessEvent[] accessEvents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/PutAccessEvent", ReplyAction="http://tempuri.org/IAccessService/PutAccessEventResponse")]
        System.Threading.Tasks.Task<int> PutAccessEventAsync(int accessSystemID, string authID, InSite.App.AccessServices.AccessEvent[] accessEvents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/GetAccessEvents", ReplyAction="http://tempuri.org/IAccessService/GetAccessEventsResponse")]
        InSite.App.AccessServices.AccessEvent[] GetAccessEvents(int accessSystemID, string authID, int lastID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/GetAccessEvents", ReplyAction="http://tempuri.org/IAccessService/GetAccessEventsResponse")]
        System.Threading.Tasks.Task<InSite.App.AccessServices.AccessEvent[]> GetAccessEventsAsync(int accessSystemID, string authID, int lastID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/EmployeeChanged", ReplyAction="http://tempuri.org/IAccessService/EmployeeChangedResponse")]
        void EmployeeChanged(int systemID, int bpID, int employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/EmployeeChanged", ReplyAction="http://tempuri.org/IAccessService/EmployeeChangedResponse")]
        System.Threading.Tasks.Task EmployeeChangedAsync(int systemID, int bpID, int employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/CompanyChanged", ReplyAction="http://tempuri.org/IAccessService/CompanyChangedResponse")]
        void CompanyChanged(int systemID, int bpID, int companyID, bool withSubcontractors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/CompanyChanged", ReplyAction="http://tempuri.org/IAccessService/CompanyChangedResponse")]
        System.Threading.Tasks.Task CompanyChangedAsync(int systemID, int bpID, int companyID, bool withSubcontractors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/RelevantDocumentChanged", ReplyAction="http://tempuri.org/IAccessService/RelevantDocumentChangedResponse")]
        void RelevantDocumentChanged(int systemID, int bpID, int relevantDocumentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/RelevantDocumentChanged", ReplyAction="http://tempuri.org/IAccessService/RelevantDocumentChangedResponse")]
        System.Threading.Tasks.Task RelevantDocumentChangedAsync(int systemID, int bpID, int relevantDocumentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/CountryChanged", ReplyAction="http://tempuri.org/IAccessService/CountryChangedResponse")]
        void CountryChanged(int systemID, int bpID, string countryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/CountryChanged", ReplyAction="http://tempuri.org/IAccessService/CountryChangedResponse")]
        System.Threading.Tasks.Task CountryChangedAsync(int systemID, int bpID, string countryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/DocumentRuleChanged", ReplyAction="http://tempuri.org/IAccessService/DocumentRuleChangedResponse")]
        void DocumentRuleChanged(int countryGroupIDEmployer, int countryGroupIDEmployee, int employmentStatusID, int relevantDocumentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/DocumentRuleChanged", ReplyAction="http://tempuri.org/IAccessService/DocumentRuleChangedResponse")]
        System.Threading.Tasks.Task DocumentRuleChangedAsync(int countryGroupIDEmployer, int countryGroupIDEmployee, int employmentStatusID, int relevantDocumentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/DocumentCheckingRuleChanged", ReplyAction="http://tempuri.org/IAccessService/DocumentCheckingRuleChangedResponse")]
        void DocumentCheckingRuleChanged(int systemID, int bpID, int countryGroupIDEmployer, int countryGroupIDEmployee, int employmentStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/DocumentCheckingRuleChanged", ReplyAction="http://tempuri.org/IAccessService/DocumentCheckingRuleChangedResponse")]
        System.Threading.Tasks.Task DocumentCheckingRuleChangedAsync(int systemID, int bpID, int countryGroupIDEmployer, int countryGroupIDEmployee, int employmentStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/TimeSlotChanged", ReplyAction="http://tempuri.org/IAccessService/TimeSlotChangedResponse")]
        void TimeSlotChanged(int systemID, int bpID, int timeSlotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/TimeSlotChanged", ReplyAction="http://tempuri.org/IAccessService/TimeSlotChangedResponse")]
        System.Threading.Tasks.Task TimeSlotChangedAsync(int systemID, int bpID, int timeSlotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/ShortTermPassChanged", ReplyAction="http://tempuri.org/IAccessService/ShortTermPassChangedResponse")]
        void ShortTermPassChanged(int systemID, int bpID, int shortTermPassID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/ShortTermPassChanged", ReplyAction="http://tempuri.org/IAccessService/ShortTermPassChangedResponse")]
        System.Threading.Tasks.Task ShortTermPassChangedAsync(int systemID, int bpID, int shortTermPassID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/AllRelevantDocumentsSubmitted", ReplyAction="http://tempuri.org/IAccessService/AllRelevantDocumentsSubmittedResponse")]
        bool AllRelevantDocumentsSubmitted(int systemID, int bpID, int employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/AllRelevantDocumentsSubmitted", ReplyAction="http://tempuri.org/IAccessService/AllRelevantDocumentsSubmittedResponse")]
        System.Threading.Tasks.Task<bool> AllRelevantDocumentsSubmittedAsync(int systemID, int bpID, int employeeID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccessServiceChannel : InSite.App.AccessServices.IAccessService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccessServiceClient : System.ServiceModel.ClientBase<InSite.App.AccessServices.IAccessService>, InSite.App.AccessServices.IAccessService {
        
        public AccessServiceClient() {
        }
        
        public AccessServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccessServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void PutSystemState(int accessSystemID, string authID, int bpID, bool allTerminalsOnline) {
            base.Channel.PutSystemState(accessSystemID, authID, bpID, allTerminalsOnline);
        }
        
        public System.Threading.Tasks.Task PutSystemStateAsync(int accessSystemID, string authID, int bpID, bool allTerminalsOnline) {
            return base.Channel.PutSystemStateAsync(accessSystemID, authID, bpID, allTerminalsOnline);
        }
        
        public void PutTerminalStatus(int accessSystemID, string authID, InSite.App.AccessServices.TerminalStatus[] status) {
            base.Channel.PutTerminalStatus(accessSystemID, authID, status);
        }
        
        public System.Threading.Tasks.Task PutTerminalStatusAsync(int accessSystemID, string authID, InSite.App.AccessServices.TerminalStatus[] status) {
            return base.Channel.PutTerminalStatusAsync(accessSystemID, authID, status);
        }
        
        public InSite.App.AccessServices.AccessRight[] GetAccessRights(int accessSystemID, string authID, bool initial) {
            return base.Channel.GetAccessRights(accessSystemID, authID, initial);
        }
        
        public System.Threading.Tasks.Task<InSite.App.AccessServices.AccessRight[]> GetAccessRightsAsync(int accessSystemID, string authID, bool initial) {
            return base.Channel.GetAccessRightsAsync(accessSystemID, authID, initial);
        }
        
        public int PutAccessEvent(int accessSystemID, string authID, InSite.App.AccessServices.AccessEvent[] accessEvents) {
            return base.Channel.PutAccessEvent(accessSystemID, authID, accessEvents);
        }
        
        public System.Threading.Tasks.Task<int> PutAccessEventAsync(int accessSystemID, string authID, InSite.App.AccessServices.AccessEvent[] accessEvents) {
            return base.Channel.PutAccessEventAsync(accessSystemID, authID, accessEvents);
        }
        
        public InSite.App.AccessServices.AccessEvent[] GetAccessEvents(int accessSystemID, string authID, int lastID) {
            return base.Channel.GetAccessEvents(accessSystemID, authID, lastID);
        }
        
        public System.Threading.Tasks.Task<InSite.App.AccessServices.AccessEvent[]> GetAccessEventsAsync(int accessSystemID, string authID, int lastID) {
            return base.Channel.GetAccessEventsAsync(accessSystemID, authID, lastID);
        }
        
        public void EmployeeChanged(int systemID, int bpID, int employeeID) {
            base.Channel.EmployeeChanged(systemID, bpID, employeeID);
        }
        
        public System.Threading.Tasks.Task EmployeeChangedAsync(int systemID, int bpID, int employeeID) {
            return base.Channel.EmployeeChangedAsync(systemID, bpID, employeeID);
        }
        
        public void CompanyChanged(int systemID, int bpID, int companyID, bool withSubcontractors) {
            base.Channel.CompanyChanged(systemID, bpID, companyID, withSubcontractors);
        }
        
        public System.Threading.Tasks.Task CompanyChangedAsync(int systemID, int bpID, int companyID, bool withSubcontractors) {
            return base.Channel.CompanyChangedAsync(systemID, bpID, companyID, withSubcontractors);
        }
        
        public void RelevantDocumentChanged(int systemID, int bpID, int relevantDocumentID) {
            base.Channel.RelevantDocumentChanged(systemID, bpID, relevantDocumentID);
        }
        
        public System.Threading.Tasks.Task RelevantDocumentChangedAsync(int systemID, int bpID, int relevantDocumentID) {
            return base.Channel.RelevantDocumentChangedAsync(systemID, bpID, relevantDocumentID);
        }
        
        public void CountryChanged(int systemID, int bpID, string countryID) {
            base.Channel.CountryChanged(systemID, bpID, countryID);
        }
        
        public System.Threading.Tasks.Task CountryChangedAsync(int systemID, int bpID, string countryID) {
            return base.Channel.CountryChangedAsync(systemID, bpID, countryID);
        }
        
        public void DocumentRuleChanged(int countryGroupIDEmployer, int countryGroupIDEmployee, int employmentStatusID, int relevantDocumentID) {
            base.Channel.DocumentRuleChanged(countryGroupIDEmployer, countryGroupIDEmployee, employmentStatusID, relevantDocumentID);
        }
        
        public System.Threading.Tasks.Task DocumentRuleChangedAsync(int countryGroupIDEmployer, int countryGroupIDEmployee, int employmentStatusID, int relevantDocumentID) {
            return base.Channel.DocumentRuleChangedAsync(countryGroupIDEmployer, countryGroupIDEmployee, employmentStatusID, relevantDocumentID);
        }
        
        public void DocumentCheckingRuleChanged(int systemID, int bpID, int countryGroupIDEmployer, int countryGroupIDEmployee, int employmentStatusID) {
            base.Channel.DocumentCheckingRuleChanged(systemID, bpID, countryGroupIDEmployer, countryGroupIDEmployee, employmentStatusID);
        }
        
        public System.Threading.Tasks.Task DocumentCheckingRuleChangedAsync(int systemID, int bpID, int countryGroupIDEmployer, int countryGroupIDEmployee, int employmentStatusID) {
            return base.Channel.DocumentCheckingRuleChangedAsync(systemID, bpID, countryGroupIDEmployer, countryGroupIDEmployee, employmentStatusID);
        }
        
        public void TimeSlotChanged(int systemID, int bpID, int timeSlotID) {
            base.Channel.TimeSlotChanged(systemID, bpID, timeSlotID);
        }
        
        public System.Threading.Tasks.Task TimeSlotChangedAsync(int systemID, int bpID, int timeSlotID) {
            return base.Channel.TimeSlotChangedAsync(systemID, bpID, timeSlotID);
        }
        
        public void ShortTermPassChanged(int systemID, int bpID, int shortTermPassID) {
            base.Channel.ShortTermPassChanged(systemID, bpID, shortTermPassID);
        }
        
        public System.Threading.Tasks.Task ShortTermPassChangedAsync(int systemID, int bpID, int shortTermPassID) {
            return base.Channel.ShortTermPassChangedAsync(systemID, bpID, shortTermPassID);
        }
        
        public bool AllRelevantDocumentsSubmitted(int systemID, int bpID, int employeeID) {
            return base.Channel.AllRelevantDocumentsSubmitted(systemID, bpID, employeeID);
        }
        
        public System.Threading.Tasks.Task<bool> AllRelevantDocumentsSubmittedAsync(int systemID, int bpID, int employeeID) {
            return base.Channel.AllRelevantDocumentsSubmittedAsync(systemID, bpID, employeeID);
        }
    }
}
