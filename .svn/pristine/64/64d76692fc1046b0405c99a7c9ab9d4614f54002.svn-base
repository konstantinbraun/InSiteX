//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InSite.App.AdminServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="System_Jobs", Namespace="http://schemas.datacontract.org/2004/07/InsiteServices")]
    [System.SerializableAttribute()]
    public partial class System_Jobs : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateBeginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DayOfMonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EditFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EditOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FrequencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int JobIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobLanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobParameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int JobTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameVisibleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> NextStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RepeatEveryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.TimeSpan> StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SystemIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TerminatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TerminationMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValidDaysField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BpID {
            get {
                return this.BpIDField;
            }
            set {
                if ((this.BpIDField.Equals(value) != true)) {
                    this.BpIDField = value;
                    this.RaisePropertyChanged("BpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedFrom {
            get {
                return this.CreatedFromField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedFromField, value) != true)) {
                    this.CreatedFromField = value;
                    this.RaisePropertyChanged("CreatedFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateBegin {
            get {
                return this.DateBeginField;
            }
            set {
                if ((this.DateBeginField.Equals(value) != true)) {
                    this.DateBeginField = value;
                    this.RaisePropertyChanged("DateBegin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateEnd {
            get {
                return this.DateEndField;
            }
            set {
                if ((this.DateEndField.Equals(value) != true)) {
                    this.DateEndField = value;
                    this.RaisePropertyChanged("DateEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DayOfMonth {
            get {
                return this.DayOfMonthField;
            }
            set {
                if ((this.DayOfMonthField.Equals(value) != true)) {
                    this.DayOfMonthField = value;
                    this.RaisePropertyChanged("DayOfMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EditFrom {
            get {
                return this.EditFromField;
            }
            set {
                if ((object.ReferenceEquals(this.EditFromField, value) != true)) {
                    this.EditFromField = value;
                    this.RaisePropertyChanged("EditFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EditOn {
            get {
                return this.EditOnField;
            }
            set {
                if ((this.EditOnField.Equals(value) != true)) {
                    this.EditOnField = value;
                    this.RaisePropertyChanged("EditOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Frequency {
            get {
                return this.FrequencyField;
            }
            set {
                if ((this.FrequencyField.Equals(value) != true)) {
                    this.FrequencyField = value;
                    this.RaisePropertyChanged("Frequency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int JobID {
            get {
                return this.JobIDField;
            }
            set {
                if ((this.JobIDField.Equals(value) != true)) {
                    this.JobIDField = value;
                    this.RaisePropertyChanged("JobID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobLanguage {
            get {
                return this.JobLanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.JobLanguageField, value) != true)) {
                    this.JobLanguageField = value;
                    this.RaisePropertyChanged("JobLanguage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobParameter {
            get {
                return this.JobParameterField;
            }
            set {
                if ((object.ReferenceEquals(this.JobParameterField, value) != true)) {
                    this.JobParameterField = value;
                    this.RaisePropertyChanged("JobParameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int JobType {
            get {
                return this.JobTypeField;
            }
            set {
                if ((this.JobTypeField.Equals(value) != true)) {
                    this.JobTypeField = value;
                    this.RaisePropertyChanged("JobType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobUrl {
            get {
                return this.JobUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.JobUrlField, value) != true)) {
                    this.JobUrlField = value;
                    this.RaisePropertyChanged("JobUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameVisible {
            get {
                return this.NameVisibleField;
            }
            set {
                if ((object.ReferenceEquals(this.NameVisibleField, value) != true)) {
                    this.NameVisibleField = value;
                    this.RaisePropertyChanged("NameVisible");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> NextStart {
            get {
                return this.NextStartField;
            }
            set {
                if ((this.NextStartField.Equals(value) != true)) {
                    this.NextStartField = value;
                    this.RaisePropertyChanged("NextStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Receiver {
            get {
                return this.ReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverField, value) != true)) {
                    this.ReceiverField = value;
                    this.RaisePropertyChanged("Receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RepeatEvery {
            get {
                return this.RepeatEveryField;
            }
            set {
                if ((this.RepeatEveryField.Equals(value) != true)) {
                    this.RepeatEveryField = value;
                    this.RaisePropertyChanged("RepeatEvery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Started {
            get {
                return this.StartedField;
            }
            set {
                if ((this.StartedField.Equals(value) != true)) {
                    this.StartedField = value;
                    this.RaisePropertyChanged("Started");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusID {
            get {
                return this.StatusIDField;
            }
            set {
                if ((this.StatusIDField.Equals(value) != true)) {
                    this.StatusIDField = value;
                    this.RaisePropertyChanged("StatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SystemID {
            get {
                return this.SystemIDField;
            }
            set {
                if ((this.SystemIDField.Equals(value) != true)) {
                    this.SystemIDField = value;
                    this.RaisePropertyChanged("SystemID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Terminated {
            get {
                return this.TerminatedField;
            }
            set {
                if ((this.TerminatedField.Equals(value) != true)) {
                    this.TerminatedField = value;
                    this.RaisePropertyChanged("Terminated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TerminationMessage {
            get {
                return this.TerminationMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.TerminationMessageField, value) != true)) {
                    this.TerminationMessageField = value;
                    this.RaisePropertyChanged("TerminationMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValidDays {
            get {
                return this.ValidDaysField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidDaysField, value) != true)) {
                    this.ValidDaysField = value;
                    this.RaisePropertyChanged("ValidDays");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdminServices.IAdminService")]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/CompressPresenceData", ReplyAction="http://tempuri.org/IAdminService/CompressPresenceDataResponse")]
        void CompressPresenceData(string schedulerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/CompressPresenceData", ReplyAction="http://tempuri.org/IAdminService/CompressPresenceDataResponse")]
        System.Threading.Tasks.Task CompressPresenceDataAsync(string schedulerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DatabaseBackup", ReplyAction="http://tempuri.org/IAdminService/DatabaseBackupResponse")]
        void DatabaseBackup(string schedulerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DatabaseBackup", ReplyAction="http://tempuri.org/IAdminService/DatabaseBackupResponse")]
        System.Threading.Tasks.Task DatabaseBackupAsync(string schedulerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetLastBackupDate", ReplyAction="http://tempuri.org/IAdminService/GetLastBackupDateResponse")]
        System.DateTime GetLastBackupDate(string schedulerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetLastBackupDate", ReplyAction="http://tempuri.org/IAdminService/GetLastBackupDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetLastBackupDateAsync(string schedulerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetJob", ReplyAction="http://tempuri.org/IAdminService/GetJobResponse")]
        InSite.App.AdminServices.System_Jobs GetJob(int systemID, int jobID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetJob", ReplyAction="http://tempuri.org/IAdminService/GetJobResponse")]
        System.Threading.Tasks.Task<InSite.App.AdminServices.System_Jobs> GetJobAsync(int systemID, int jobID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateJob", ReplyAction="http://tempuri.org/IAdminService/UpdateJobResponse")]
        bool UpdateJob(InSite.App.AdminServices.System_Jobs job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateJob", ReplyAction="http://tempuri.org/IAdminService/UpdateJobResponse")]
        System.Threading.Tasks.Task<bool> UpdateJobAsync(InSite.App.AdminServices.System_Jobs job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/InsertJob", ReplyAction="http://tempuri.org/IAdminService/InsertJobResponse")]
        int InsertJob(InSite.App.AdminServices.System_Jobs job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/InsertJob", ReplyAction="http://tempuri.org/IAdminService/InsertJobResponse")]
        System.Threading.Tasks.Task<int> InsertJobAsync(InSite.App.AdminServices.System_Jobs job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteJob", ReplyAction="http://tempuri.org/IAdminService/DeleteJobResponse")]
        bool DeleteJob(int systemID, int jobID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteJob", ReplyAction="http://tempuri.org/IAdminService/DeleteJobResponse")]
        System.Threading.Tasks.Task<bool> DeleteJobAsync(int systemID, int jobID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetDueJobs", ReplyAction="http://tempuri.org/IAdminService/GetDueJobsResponse")]
        InSite.App.AdminServices.System_Jobs[] GetDueJobs(int systemID, System.Nullable<System.DateTime> dueTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetDueJobs", ReplyAction="http://tempuri.org/IAdminService/GetDueJobsResponse")]
        System.Threading.Tasks.Task<InSite.App.AdminServices.System_Jobs[]> GetDueJobsAsync(int systemID, System.Nullable<System.DateTime> dueTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RefreshJob", ReplyAction="http://tempuri.org/IAdminService/RefreshJobResponse")]
        int RefreshJob(InSite.App.AdminServices.System_Jobs job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/RefreshJob", ReplyAction="http://tempuri.org/IAdminService/RefreshJobResponse")]
        System.Threading.Tasks.Task<int> RefreshJobAsync(InSite.App.AdminServices.System_Jobs job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/ExecuteDueJobs", ReplyAction="http://tempuri.org/IAdminService/ExecuteDueJobsResponse")]
        void ExecuteDueJobs(int systemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/ExecuteDueJobs", ReplyAction="http://tempuri.org/IAdminService/ExecuteDueJobsResponse")]
        System.Threading.Tasks.Task ExecuteDueJobsAsync(int systemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/TerminateUnusedSessions", ReplyAction="http://tempuri.org/IAdminService/TerminateUnusedSessionsResponse")]
        void TerminateUnusedSessions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/TerminateUnusedSessions", ReplyAction="http://tempuri.org/IAdminService/TerminateUnusedSessionsResponse")]
        System.Threading.Tasks.Task TerminateUnusedSessionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateAccessRights", ReplyAction="http://tempuri.org/IAdminService/UpdateAccessRightsResponse")]
        void UpdateAccessRights(string schedulerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateAccessRights", ReplyAction="http://tempuri.org/IAdminService/UpdateAccessRightsResponse")]
        System.Threading.Tasks.Task UpdateAccessRightsAsync(string schedulerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AdditionAccessTimes", ReplyAction="http://tempuri.org/IAdminService/AdditionAccessTimesResponse")]
        void AdditionAccessTimes(string schedulerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AdditionAccessTimes", ReplyAction="http://tempuri.org/IAdminService/AdditionAccessTimesResponse")]
        System.Threading.Tasks.Task AdditionAccessTimesAsync(string schedulerID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : InSite.App.AdminServices.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.ClientBase<InSite.App.AdminServices.IAdminService>, InSite.App.AdminServices.IAdminService {
        
        public AdminServiceClient() {
        }
        
        public AdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CompressPresenceData(string schedulerID) {
            base.Channel.CompressPresenceData(schedulerID);
        }
        
        public System.Threading.Tasks.Task CompressPresenceDataAsync(string schedulerID) {
            return base.Channel.CompressPresenceDataAsync(schedulerID);
        }
        
        public void DatabaseBackup(string schedulerID) {
            base.Channel.DatabaseBackup(schedulerID);
        }
        
        public System.Threading.Tasks.Task DatabaseBackupAsync(string schedulerID) {
            return base.Channel.DatabaseBackupAsync(schedulerID);
        }
        
        public System.DateTime GetLastBackupDate(string schedulerID) {
            return base.Channel.GetLastBackupDate(schedulerID);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetLastBackupDateAsync(string schedulerID) {
            return base.Channel.GetLastBackupDateAsync(schedulerID);
        }
        
        public InSite.App.AdminServices.System_Jobs GetJob(int systemID, int jobID) {
            return base.Channel.GetJob(systemID, jobID);
        }
        
        public System.Threading.Tasks.Task<InSite.App.AdminServices.System_Jobs> GetJobAsync(int systemID, int jobID) {
            return base.Channel.GetJobAsync(systemID, jobID);
        }
        
        public bool UpdateJob(InSite.App.AdminServices.System_Jobs job) {
            return base.Channel.UpdateJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateJobAsync(InSite.App.AdminServices.System_Jobs job) {
            return base.Channel.UpdateJobAsync(job);
        }
        
        public int InsertJob(InSite.App.AdminServices.System_Jobs job) {
            return base.Channel.InsertJob(job);
        }
        
        public System.Threading.Tasks.Task<int> InsertJobAsync(InSite.App.AdminServices.System_Jobs job) {
            return base.Channel.InsertJobAsync(job);
        }
        
        public bool DeleteJob(int systemID, int jobID) {
            return base.Channel.DeleteJob(systemID, jobID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteJobAsync(int systemID, int jobID) {
            return base.Channel.DeleteJobAsync(systemID, jobID);
        }
        
        public InSite.App.AdminServices.System_Jobs[] GetDueJobs(int systemID, System.Nullable<System.DateTime> dueTimestamp) {
            return base.Channel.GetDueJobs(systemID, dueTimestamp);
        }
        
        public System.Threading.Tasks.Task<InSite.App.AdminServices.System_Jobs[]> GetDueJobsAsync(int systemID, System.Nullable<System.DateTime> dueTimestamp) {
            return base.Channel.GetDueJobsAsync(systemID, dueTimestamp);
        }
        
        public int RefreshJob(InSite.App.AdminServices.System_Jobs job) {
            return base.Channel.RefreshJob(job);
        }
        
        public System.Threading.Tasks.Task<int> RefreshJobAsync(InSite.App.AdminServices.System_Jobs job) {
            return base.Channel.RefreshJobAsync(job);
        }
        
        public void ExecuteDueJobs(int systemID) {
            base.Channel.ExecuteDueJobs(systemID);
        }
        
        public System.Threading.Tasks.Task ExecuteDueJobsAsync(int systemID) {
            return base.Channel.ExecuteDueJobsAsync(systemID);
        }
        
        public void TerminateUnusedSessions() {
            base.Channel.TerminateUnusedSessions();
        }
        
        public System.Threading.Tasks.Task TerminateUnusedSessionsAsync() {
            return base.Channel.TerminateUnusedSessionsAsync();
        }
        
        public void UpdateAccessRights(string schedulerID) {
            base.Channel.UpdateAccessRights(schedulerID);
        }
        
        public System.Threading.Tasks.Task UpdateAccessRightsAsync(string schedulerID) {
            return base.Channel.UpdateAccessRightsAsync(schedulerID);
        }
        
        public void AdditionAccessTimes(string schedulerID) {
            base.Channel.AdditionAccessTimes(schedulerID);
        }
        
        public System.Threading.Tasks.Task AdditionAccessTimesAsync(string schedulerID) {
            return base.Channel.AdditionAccessTimesAsync(schedulerID);
        }
    }
}
